import argparse
import numpy as np
import glob
import os

def read_gjf(filename):
    """读取GJF文件中的原子坐标"""
    atoms = []
    coords = []
    
    with open(filename, 'r') as f:
        lines = f.readlines()
        
    # 跳过头部直到找到坐标部分
    start_coords = 0
    for i, line in enumerate(lines):
        if '1 1' in line:  # 通常坐标从这行后开始
            start_coords = i + 1
            break
    
    # 读取坐标
    for line in lines[start_coords:]:
        if line.strip() == '':  # 遇到空行停止
            break
        parts = line.split()
        if len(parts) == 4:  # 确保行包含原子和三个坐标
            atoms.append(parts[0])
            coords.append([float(x) for x in parts[1:4]])
    
    return np.array(atoms), np.array(coords)

def get_cell_parameters(coords, expand_coef=5.0):
    """计算晶胞参数"""
    # 获取每个方向的最大最小值
    min_coords = np.min(coords, axis=0)
    max_coords = np.max(coords, axis=0)
    
    # 计算每个方向的长度并添加缓冲区
    lengths = max_coords - min_coords + expand_coef
    
    # 创建晶格矩阵 (正交晶胞)
    cell = np.diag(lengths)
    
    return cell

def center_molecule(coords, cell):
    """将分子移动到晶胞中心"""
    cell_center = np.sum(cell, axis=1) / 2
    mol_center = np.mean(coords, axis=0)
    return coords + (cell_center - mol_center)

def write_vasp(filename, atoms, coords, cell, is_fractional=False):
    """写入VASP POSCAR格式"""
    unique_atoms = np.unique(atoms)
    atom_counts = [np.sum(atoms == atom) for atom in unique_atoms]
    
    # 如果需要分数坐标，进行转换
    if is_fractional:
        # 计算晶格矩阵的逆矩阵
        cell_inv = np.linalg.inv(cell)
        # 将笛卡尔坐标转换为分数坐标
        coords = np.dot(coords, cell_inv)
    
    with open(filename, 'w') as f:
        f.write("Generated by gjf2vasp\n")
        f.write("1.0\n")
        # 写入晶格矩阵
        for row in cell:
            f.write(f"{row[0]:15.8f} {row[1]:15.8f} {row[2]:15.8f}\n")
        # 写入原子类型
        f.write(' '.join(unique_atoms) + '\n')
        # 写入原子数量
        f.write(' '.join(str(count) for count in atom_counts) + '\n')
        # 写入坐标类型
        f.write("Direct\n" if is_fractional else "Cartesian\n")
        # 写入坐标
        for atom_type in unique_atoms:
            mask = atoms == atom_type
            for pos in coords[mask]:
                f.write(f"{pos[0]:15.8f} {pos[1]:15.8f} {pos[2]:15.8f}\n")

def write_xsf(filename, atoms, coords, cell):
    """写入XSF格式文件"""
    with open(filename, 'w') as f:
        f.write("CRYSTAL\n")
        f.write("PRIMVEC\n")
        # 写入晶格矢量
        for row in cell:
            f.write(f"{row[0]:15.8f} {row[1]:15.8f} {row[2]:15.8f}\n")
        
        f.write("PRIMCOORD\n")
        f.write(f"{len(atoms)} 1\n")
        # 写入原子坐标
        # XSF格式需要原子序数，所以需要转换
        atomic_numbers = {
            'H': 1, 'He': 2, 'Li': 3, 'Be': 4, 'B': 5, 'C': 6, 'N': 7, 'O': 8, 'F': 9,
            'Ne': 10, 'Na': 11, 'Mg': 12, 'Al': 13, 'Si': 14, 'P': 15, 'S': 16, 'Cl': 17
        }
        for atom, coord in zip(atoms, coords):
            atomic_num = atomic_numbers.get(atom, 0)
            f.write(f"{atomic_num:4d} {coord[0]:15.8f} {coord[1]:15.8f} {coord[2]:15.8f}\n")

def write_cif(filename, atoms, coords, cell):
    """写入CIF格式文件"""
    with open(filename, 'w') as f:
        f.write("data_crystal\n\n")
        f.write("_audit_creation_method   'Generated by gjf2vasp'\n")
        f.write("_symmetry_space_group_name_H-M   'P 1'\n")
        f.write("_symmetry_Int_Tables_number   1\n")
        f.write("_symmetry_cell_setting   triclinic\n")
        
        # 计算晶胞参数
        a, b, c = np.sqrt(np.sum(cell**2, axis=1))
        alpha = np.degrees(np.arccos(np.dot(cell[1], cell[2])/(b*c)))
        beta = np.degrees(np.arccos(np.dot(cell[0], cell[2])/(a*c)))
        gamma = np.degrees(np.arccos(np.dot(cell[0], cell[1])/(a*b)))
        
        # 写入晶胞参数
        f.write(f"_cell_length_a   {a:.6f}\n")
        f.write(f"_cell_length_b   {b:.6f}\n")
        f.write(f"_cell_length_c   {c:.6f}\n")
        f.write(f"_cell_angle_alpha   {alpha:.6f}\n")
        f.write(f"_cell_angle_beta    {beta:.6f}\n")
        f.write(f"_cell_angle_gamma   {gamma:.6f}\n\n")
        
        f.write("loop_\n")
        f.write("_atom_site_label\n")
        f.write("_atom_site_type_symbol\n")
        f.write("_atom_site_fract_x\n")
        f.write("_atom_site_fract_y\n")
        f.write("_atom_site_fract_z\n")
        
        # 转换为分数坐标
        cell_inv = np.linalg.inv(cell)
        frac_coords = np.dot(coords, cell_inv)
        
        # 写入原子坐标
        for i, (atom, coord) in enumerate(zip(atoms, frac_coords)):
            f.write(f"{atom}{i+1} {atom} {coord[0]:10.6f} {coord[1]:10.6f} {coord[2]:10.6f}\n")

def main():
    parser = argparse.ArgumentParser(description='Convert GJF file to various formats')
    parser.add_argument('input', nargs='?', help='Input GJF file')
    parser.add_argument('--all', '-a', action='store_true',
                        help='Convert all .gjf files in current directory')
    parser.add_argument('--format', '-o', choices=['vasp', 'xsf', 'cif'], default='vasp',
                        help='Output format (default: vasp)')
    parser.add_argument('--expand', '-e', type=float, default=5.0,
                        help='Expansion coefficient for cell size (default: 5.0)')
    parser.add_argument('--fractional', '-f', action='store_true',
                        help='Use fractional coordinates (default: Cartesian)')
    
    args = parser.parse_args()
    
    if args.all:
        # 获取当前目录下所有的.gjf文件
        gjf_files = glob.glob("*.gjf")
        if not gjf_files:
            print("当前目录下没有找到.gjf文件！")
            return
    else:
        if not args.input:
            parser.error("请提供输入文件或使用 -a 参数转换所有文件")
        gjf_files = [args.input]
    
    for gjf_file in gjf_files:
        try:
            # 读取GJF文件
            atoms, coords = read_gjf(gjf_file)
            
            # 计算晶胞参数
            cell = get_cell_parameters(coords, args.expand)
            
            # 将分子居中
            coords = center_molecule(coords, cell)
            
            # 根据选择的格式输出文件
            base_name = gjf_file.rsplit('.', 1)[0]
            if args.format == 'vasp':
                output_file = base_name + '.vasp'
                write_vasp(output_file, atoms, coords, cell, args.fractional)
            elif args.format == 'xsf':
                output_file = base_name + '.xsf'
                write_xsf(output_file, atoms, coords, cell)
            elif args.format == 'cif':
                output_file = base_name + '.cif'
                write_cif(output_file, atoms, coords, cell)
            
            print(f"转换完成! {gjf_file} -> {output_file}")
        except Exception as e:
            print(f"处理文件 {gjf_file} 时出错: {str(e)}")

if __name__ == "__main__":
    main()
